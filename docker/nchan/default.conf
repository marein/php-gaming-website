nchan_shared_memory_size $NCHAN_SHARED_MEMORY_SIZE;

server {
    listen 80;

    location = /sse/sub {
        nchan_subscriber;
        nchan_channel_id $arg_id;
        nchan_channel_id_split_delimiter ,;
    }

    error_log /dev/stdout;
    access_log /dev/stdout;
}

map $nchan_stub_status_shared_memory_used $raw_nchan_stub_status_shared_memory_used {
    default "0";
    "~^(\d+).*$" $1;
}

# These endpoints aren't protected (for simplicity).
# The port 81 is never exposed.
server {
    listen 81;

    location = /pub {
        keepalive_requests $NCHAN_HTTP_KEEPALIVE_REQUESTS;
        nchan_publisher;
        nchan_channel_id $arg_id;
        nchan_channel_id_split_delimiter ,;
        nchan_message_buffer_length $NCHAN_MESSAGE_BUFFER_LENGTH;
        nchan_message_timeout $NCHAN_MESSAGE_TIMEOUT;
        nchan_store_messages on;
    }

    location /metrics {
        nchan_stub_status;

        set $CONTENT '';
        set $CONTENT '${CONTENT}# HELP nchan_total_published_messages Number of messages published to all channels through this Nchan server.\n';
        set $CONTENT '${CONTENT}# TYPE nchan_total_published_messages counter\n';
        set $CONTENT '${CONTENT}nchan_total_published_messages{} ${nchan_stub_status_total_published_messages}\n';

        set $CONTENT '${CONTENT}# HELP nchan_stored_messages Number of messages currently buffered in memory.\n';
        set $CONTENT '${CONTENT}# TYPE nchan_stored_messages gauge\n';
        set $CONTENT '${CONTENT}nchan_stored_messages{} ${nchan_stub_status_stored_messages}\n';

        set $CONTENT '${CONTENT}# HELP nchan_shared_memory_used Total shared memory used for buffering messages, storing channel information, and other purposes. This value should be comfortably below nchan_shared_memory_size.\n';
        set $CONTENT '${CONTENT}# TYPE nchan_shared_memory_used gauge\n';
        set $CONTENT '${CONTENT}nchan_shared_memory_used{} ${raw_nchan_stub_status_shared_memory_used}\n';

        set $CONTENT '${CONTENT}# HELP nchan_channels Number of channels present on this Nchan server.\n';
        set $CONTENT '${CONTENT}# TYPE nchan_channels gauge\n';
        set $CONTENT '${CONTENT}nchan_channels{} ${nchan_stub_status_channels}\n';

        set $CONTENT '${CONTENT}# HELP nchan_subscribers Number of subscribers to all channels on this Nchan server.\n';
        set $CONTENT '${CONTENT}# TYPE nchan_subscribers gauge\n';
        set $CONTENT '${CONTENT}nchan_subscribers{} ${nchan_stub_status_subscribers}\n';

        set $CONTENT '${CONTENT}# HELP nchan_redis_pending_commands Number of commands sent to Redis that are awaiting a reply. May spike during high load, especially if the Redis server is overloaded. Should tend towards 0.\n';
        set $CONTENT '${CONTENT}# TYPE nchan_redis_pending_commands gauge\n';
        set $CONTENT '${CONTENT}nchan_redis_pending_commands{} ${nchan_stub_status_redis_pending_commands}\n';

        set $CONTENT '${CONTENT}# HELP nchan_redis_connected_servers Number of redis servers to which Nchan is currently connected.\n';
        set $CONTENT '${CONTENT}# TYPE nchan_redis_connected_servers gauge\n';
        set $CONTENT '${CONTENT}nchan_redis_connected_servers{} ${nchan_stub_status_redis_connected_servers}\n';

        set $CONTENT '${CONTENT}# HELP nchan_redis_unhealthy_upstreams Number of redis upstreams (individual server or cluster mode) that are currently not usable for publishing and subscribing.\n';
        set $CONTENT '${CONTENT}# TYPE nchan_redis_unhealthy_upstreams gauge\n';
        set $CONTENT '${CONTENT}nchan_redis_unhealthy_upstreams{} ${nchan_stub_status_redis_unhealthy_upstreams}\n';

        set $CONTENT '${CONTENT}# HELP nchan_total_ipc_alerts_received Number of interprocess communication packets transmitted between Nginx workers processes for Nchan. Can grow at 100-10000 per second at high load.\n';
        set $CONTENT '${CONTENT}# TYPE nchan_total_ipc_alerts_received counter\n';
        set $CONTENT '${CONTENT}nchan_total_ipc_alerts_received{} ${nchan_stub_status_total_ipc_alerts_received}\n';

        set $CONTENT '${CONTENT}# HELP nchan_ipc_alerts_in_transit Number of interprocess communication packets in transit between Nginx workers. May be nonzero during high load, but should always tend toward 0 over time.\n';
        set $CONTENT '${CONTENT}# TYPE nchan_ipc_alerts_in_transit gauge\n';
        set $CONTENT '${CONTENT}nchan_ipc_alerts_in_transit{} ${nchan_stub_status_ipc_alerts_in_transit}\n';

        set $CONTENT '${CONTENT}# HELP nchan_ipc_queued_alerts Number of interprocess communication packets waiting to be sent. May be nonzero during high load, but should always tend toward 0 over time.\n';
        set $CONTENT '${CONTENT}# TYPE nchan_ipc_queued_alerts gauge\n';
        set $CONTENT '${CONTENT}nchan_ipc_queued_alerts{} ${nchan_stub_status_ipc_queued_alerts}\n';

        set $CONTENT '${CONTENT}# HELP nchan_total_ipc_send_delay Total amount of time interprocess communication packets spend being queued if delayed. May increase during high load.\n';
        set $CONTENT '${CONTENT}# TYPE nchan_total_ipc_send_delay counter\n';
        set $CONTENT '${CONTENT}nchan_total_ipc_send_delay{} ${nchan_stub_status_total_ipc_send_delay}\n';

        set $CONTENT '${CONTENT}# HELP nchan_total_ipc_receive_delay Total amount of time interprocess communication packets spend in transit if delayed. May increase during high load.\n';
        set $CONTENT '${CONTENT}# TYPE nchan_total_ipc_receive_delay counter\n';
        set $CONTENT '${CONTENT}nchan_total_ipc_receive_delay{} ${nchan_stub_status_total_ipc_receive_delay}\n';

        add_header Content-Type text/plain;

        return 200 $CONTENT;
    }

    error_log /dev/stdout;
    access_log /dev/stdout;
}
