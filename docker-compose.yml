version: '3.4'

x-php-container:
    &php-container
    build:
        context: .
        dockerfile: ./docker/php-fpm/Dockerfile
    env_file: ./.env
    depends_on:
        - mysql
        - proxysql
        - redis
        - rabbit-mq
        - nchan
    volumes:
        - ./config:/project/config:delegated
        - ./src:/project/src:delegated
        - vendor:/project/vendor
        - proxysql.sock:/var/run/proxysql
    restart: on-failure

services:
    ##############################
    #  Database and application  #
    ##############################
    traefik:
        build:
            context: .
            dockerfile: ./docker/traefik/Dockerfile
        command:
            - --metrics.prometheus=true
            - --providers.docker
            - --providers.docker.exposedbydefault=false
        ports:
            - "80:80"
        depends_on:
            - nchan
            - php-fpm
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        labels:
            - "prometheus-job=traefik"
            - "prometheus-port=8080"
    grafana:
        build:
            context: .
            dockerfile: ./docker/grafana/Dockerfile
        environment:
            GF_AUTH_DISABLE_LOGIN_FORM: 1
            GF_AUTH_ANONYMOUS_ENABLED: 1
            GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
        ports:
            - "8083:3000"
        volumes:
            - ./docker/grafana/provisioning:/etc/grafana/provisioning
            - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    prometheus:
        build:
            context: .
            dockerfile: ./docker/prometheus/Dockerfile
        user: root # Needed for accessing docker.sock. In prod, it may be handled via file permissions.
        command:
            - '--config.file=/etc/prometheus/prometheus-docker.yml'
            - '--storage.tsdb.path=/prometheus'
        volumes:
            - prometheus:/prometheus
            - /var/run/docker.sock:/var/run/docker.sock
        restart: on-failure
    node-exporter:
        image: prom/node-exporter:v1.6.0
        labels:
            - "prometheus-job=node"
            - "prometheus-port=9100"
    mysql:
        build:
            context: .
            dockerfile: ./docker/mysql/Dockerfile
        environment:
            MYSQL_ROOT_PASSWORD: password
        volumes:
            - mysql:/var/lib/mysql
        restart: on-failure
    mysql-exporter:
        image: prom/mysqld-exporter:v0.15.0
        command: --mysqld.username=root --mysqld.address mysql:3306
        environment:
            MYSQLD_EXPORTER_PASSWORD: password
        labels:
            - "prometheus-job=mysql"
            - "prometheus-port=9104"
    proxysql:
        build:
            context: .
            dockerfile: ./docker/proxysql/Dockerfile
        environment:
            PROXYSQL_CONFIG: |
                admin_variables: {
                    restapi_enabled="true"
                }
                mysql_variables: {
                    interfaces="/var/run/proxysql/proxysql.sock"
                    server_version="8.0"
                    monitor_username="root"
                    monitor_password="password"
                    auto_increment_delay_multiplex=0
                }
                mysql_servers: (
                    {hostgroup=1,address="mysql",port=3306,max_connections=100}
                )
                mysql_users: (
                    {username="root",password="password",default_hostgroup=1}
                )
        depends_on:
            - mysql
        volumes:
            - proxysql.sock:/var/run/proxysql
        labels:
            - "prometheus-job=proxysql"
            - "prometheus-port=6070"
            - "prometheus-path=/metrics"
        restart: on-failure
    redis:
        build:
            context: .
            dockerfile: ./docker/redis/Dockerfile
        command: redis-server --appendonly yes
        volumes:
            - redis:/data
        restart: on-failure
    redis-exporter:
        image: oliver006/redis_exporter:v1.51.0
        command:
            - '-redis.addr=redis:6379'
        labels:
            - "prometheus-job=redis"
            - "prometheus-port=9121"
    rabbit-mq:
        build:
            context: .
            dockerfile: ./docker/rabbit-mq/Dockerfile
        hostname: rabbit-mq
        volumes:
            - rabbit-mq:/var/lib/rabbitmq/mnesia
        labels:
            - "prometheus-job=rabbitmq"
            - "prometheus-port=15692"
            - "prometheus-path=/metrics/per-object"
        restart: on-failure
    nchan:
        build:
            context: .
            dockerfile: ./docker/nchan/Dockerfile
        restart: on-failure
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.nchan.priority=20"
            - "traefik.http.routers.nchan.rule=PathPrefix(`/sse`)"
            - "prometheus-job=nchan"
            - "prometheus-port=81"
    php-fpm:
        <<: *php-container
        volumes:
            - ./assets:/project/assets:delegated
            - ./config:/project/config:delegated
            - ./src:/project/src:delegated
            - ./tests:/project/tests:delegated
            - ./var:/project/var:delegated
            - ./web:/project/web:delegated
            - vendor:/project/vendor
            - proxysql.sock:/var/run/proxysql
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.php-fpm.priority=10"
            - "traefik.http.routers.php-fpm.rule=PathPrefix(`/`)"
            - "traefik.http.services.php-fpm.loadbalancer.server.port=80"

    ##############################
    #   Long running processes   #
    ##############################
    php-connect-four-follow-event-store:
        <<: *php-container
        command: bin/restartOnChange bin/console connect-four:follow-event-store pointer all
    php-chat-follow-event-store:
        <<: *php-container
        command: bin/restartOnChange bin/console chat:follow-event-store pointer all
    php-identity-follow-event-store:
        <<: *php-container
        command: bin/restartOnChange bin/console identity:follow-event-store pointer all
    php-consume-messages:
        <<: *php-container
        command: bin/restartOnChange bin/console gaming:consume-messages all
    php-web-interface-publish-running-games-count-to-nchan:
        <<: *php-container
        command: bin/restartOnChange bin/console web-interface:publish-running-games-count-to-nchan

    ##############################
    #     Development helper     #
    ##############################
    php:
        build:
            context: .
            dockerfile: ./docker/php-fpm/Dockerfile
        entrypoint: ''
        command: 'true'
        volumes:
            - ./src:/project/src:delegated
            - ./tests:/project/tests:delegated
            - vendor:/project/vendor
    composer:
        build:
            context: .
            dockerfile: ./docker/php-fpm/Dockerfile
            target: builder
        entrypoint: ''
        command: 'true'
        volumes:
            - ./composer.json:/project/composer.json
            - ./composer.lock:/project/composer.lock
            - vendor:/project/vendor
    phpmyadmin:
        image: phpmyadmin/phpmyadmin:5.2
        environment:
            PMA_HOST: mysql
            PMA_USER: root
            PMA_PASSWORD: password
        ports:
            - "8081:80"
        depends_on:
            - mysql
    phpredisadmin:
        image: erikdubbelboer/phpredisadmin:1
        environment:
            REDIS_1_HOST: redis
        ports:
            - "8082:80"
        depends_on:
            - redis

volumes:
    vendor:
    mysql:
    proxysql.sock:
    redis:
    rabbit-mq:
    prometheus:
